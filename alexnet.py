# -*- coding: utf-8 -*-
"""alexnet

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DShssjE4IgIN1oWp-vnhS3Y96bhFENg2
"""





import tensorflow as tf
from tensorflow import keras
#from keras.datasets import cifar10 # Not used in this script
#from keras.optimizers import SGD  # Not used in this script
from tensorflow.keras.preprocessing.image import ImageDataGenerator # Use tf.keras for ImageDataGenerator
from tensorflow.keras.models import Sequential # Use tf.keras for Sequential
from tensorflow.keras.layers import Dense, Dropout, Activation, Flatten # Use tf.keras for layers
from tensorflow.keras.layers import Conv2D, MaxPooling2D, ZeroPadding2D, BatchNormalization # Use tf.keras for layers



resize = 224  # or any desired image size, e.g., 128, 256, etc.

model = Sequential()

# part 1
model.add(Conv2D(filters=96, kernel_size=(11,11),
                 strides=(4,4), padding='valid',
                 input_shape=(resize,resize,3), # 'resize' is now defined
                 activation='relu'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(3,3),
                       strides=(2,2),
                       padding='valid'))
# ... (rest of your model code) ...

model.add(Conv2D(filters=256, kernel_size=(5,5),
                 strides=(1,1), padding='same',
                 activation='relu'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(3,3),
                       strides=(2,2),
                       padding='valid'))
# part 3
model.add(Conv2D(filters=384, kernel_size=(3,3),
                 strides=(1,1), padding='same',
                 activation='relu'))
model.add(Conv2D(filters=384, kernel_size=(3,3),
                 strides=(1,1), padding='same',
                 activation='relu'))
model.add(Conv2D(filters=256, kernel_size=(3,3),
                 strides=(1,1), padding='same',
                 activation='relu'))
model.add(MaxPooling2D(pool_size=(3,3),
                       strides=(2,2), padding='valid'))
# part 4
model.add(Flatten())
model.add(Dense(4096, activation='relu'))
model.add(Dropout(0.5))

model.add(Dense(4096, activation='relu'))
model.add(Dropout(0.5))

model.add(Dense(1000, activation='relu'))
model.add(Dropout(0.5))

# Output Layer
model.add(Dense(2))
model.add(Activation('softmax'))

model.compile(loss='categorical_crossentropy',
              optimizer='sgd',
              metrics=['accuracy'])

model.summary()